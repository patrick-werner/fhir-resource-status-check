name: 'Validate FHIR Resource Status'
description: 'Recursively validates that FHIR JSON files (if a status field is present) have status "active" or "retired".'
author: 'Patrick Werner <pa.f.werner@gmail.com>'
branding:
  icon: 'check-circle'
  color: 'blue'
inputs:
  folder:
    description: 'Path to the folder containing FHIR files'
    required: true
    default: './Resources/fsh-generated/resources'
runs:
  using: "composite"
  steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Validate FHIR Resource Statuses
      shell: bash
      run: |
        FOLDER="${{ inputs.folder }}"
        echo "Scanning folder: ${FOLDER}"
        exit_code=0
        invalid_files=()

        # Define a list of definitional resource types.
        DEFINITIONS=(
          "StructureDefinition"
          "ValueSet"
          "CodeSystem"
          "ConceptMap"
          "OperationDefinition"
          "SearchParameter"
          "NamingSystem"
          "StructureMap"
          "GraphDefinition"
          "ImplementationGuide"
        )

        # Recursively find all .json files in the specified folder.
        while IFS= read -r -d '' file; do
          echo "Checking file: ${file}"

          # Extract the resourceType (e.g. Observation, StructureDefinition, etc.)
          resourceType=$(jq -r '.resourceType // empty' "${file}")
        
          # If the resource type is not in the list of definitional resources, skip it.
          skip_resource=true
          for def in "${DEFINITIONS[@]}"; do
            if [ "$resourceType" = "$def" ]; then
              skip_resource=false
              break
            fi
          done

          if [ "$skip_resource" = true ]; then
            echo "Skipping file: ${file} (resourceType: ${resourceType})"
            continue
          fi

          # Extract the top-level "status" field (if any).
          status=$(jq -r '.status // empty' "${file}")

          # If the status exists and is not "active" or "retired", report an error.
          if [ -n "$status" ] && [ "$status" != "active" ] && [ "$status" != "retired" ]; then
            echo "Error: ${file} has status '${status}' (expected 'active' or 'retired')"
            invalid_files+=("${file}")
            exit_code=1
          fi
        done < <(find "${FOLDER}" -type f -name '*.json' -print0)

        # Print summary of invalid files.
        if [ ${#invalid_files[@]} -ne 0 ]; then
          echo "Summary of invalid files:"
          for invalid_file in "${invalid_files[@]}"; do
            echo "${invalid_file}"
          done
        else
          echo "No invalid files found."
        fi

        exit $exit_code
